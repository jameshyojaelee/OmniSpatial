name: CI

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Ruff
        working-directory: omnispatial
        run: poetry run ruff check src
      - name: Black
        working-directory: omnispatial
        run: poetry run black --check src tests
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Viewer lint
        working-directory: viewer
        run: |
          corepack enable
          pnpm install
          pnpm lint

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Mypy
        working-directory: omnispatial
        run: poetry run mypy src

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Pytest
        working-directory: omnispatial
        run: poetry run pytest --cov

  build:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Build wheel
        working-directory: omnispatial
        run: poetry build -f wheel
      - name: Upload wheel artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v3
        with:
          name: omnispatial-wheel
          path: omnispatial/dist/*.whl

  docs:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install documentation dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Build docs
        working-directory: omnispatial
        run: poetry run mkdocs build --strict --config-file ../mkdocs.yml --site-dir ../site
      - name: Upload documentation artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: site

  docker:
    runs-on: ubuntu-latest
    needs: [build, docs]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Compute image tags
        id: meta
        run: |
          IMAGE="ghcr.io/${{ github.repository }}/omnispatial"
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          TAGS="${IMAGE}:sha-${SHORT_SHA}"
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            TAGS="${TAGS},${IMAGE}:latest"
          fi
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            TAGS="${TAGS},${IMAGE}:${VERSION}"
          fi
          echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta.outputs.tags }}

  deploy-docs:
    runs-on: ubuntu-latest
    needs: docs
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - id: deploy
        uses: actions/deploy-pages@v4

  publish:
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install project
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Build distributions
        working-directory: omnispatial
        run: poetry build
      - name: Extract changelog entry
        id: changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          python tools/extract_changelog.py "${VERSION}" > release_notes.md
          echo "notes<<EOF" >> "$GITHUB_OUTPUT"
          cat release_notes.md >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: OmniSpatial ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.notes }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
