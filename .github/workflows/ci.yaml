name: CI

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Ruff
        working-directory: omnispatial
        run: poetry run ruff check src
      - name: Black
        working-directory: omnispatial
        run: poetry run black --check src tests
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Viewer lint
        working-directory: viewer
        run: |
          corepack enable
          pnpm install
          pnpm lint

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Mypy
        working-directory: omnispatial
        run: poetry run mypy src

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Pytest
        working-directory: omnispatial
        run: poetry run pytest --cov

  build:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Build wheel
        working-directory: omnispatial
        run: poetry build -f wheel
      - name: Upload wheel artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v3
        with:
          name: omnispatial-wheel
          path: omnispatial/dist/*.whl

  docs:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install documentation dependencies
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Build docs
        working-directory: omnispatial
        run: poetry run mkdocs build --strict --config-file ../mkdocs.yml --site-dir ../site
      - name: Upload documentation artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: site

  deploy-docs:
    runs-on: ubuntu-latest
    needs: docs
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - id: deploy
        uses: actions/deploy-pages@v4

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry
      - name: Install project
        working-directory: omnispatial
        run: poetry install --with dev
      - name: Build distributions
        working-directory: omnispatial
        run: poetry build
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
